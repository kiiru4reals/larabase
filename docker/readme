#build image locally  solutech_sat is the name and . the directory where the dockerfile is located
docker build -t solutech_sat .

#PROD enter the image using terminal and run the starting the command solutech_sat is the name of the image
docker run --rm -ti solutech_sat sh

#PROD run the image in background
docker run -d -p 8080:8080 solutech_sat

#PROD run the image in background and mount the volume
docker run -d -p 8080:8080 -v /home/solutech/solutech_sat:/solutech_sat solutech_sat

#start containers locally
docker-compose up -d --build

#stop containers locally
docker-compose down

#enter local docker container (solutech_sat) is the container name
docker exec -it solutech_sat sh
docker exec -it solutech_sat /bin/sh

kubectl apply -f solutech-dev-app.yaml
kubectl apply -f solutech_sql_credential.yaml
kubectl apply -f solutech.yaml --validate=false

kubectl create secret generic cloudsql-instance-credentials \ --from-file=credentials.json=credentials.json

kubectl delete -f solutech-dev-app.yaml

kubectl describe pods solutech-sat-dev-7fcbd64596-8rmfk -n web-app-dev

kubectl exec solutech-sat-dev-7fcbd64596-8rmfk --namespace web-app-dev -c solutech-sat-dev -it -- bash

# Get commands with basic output
kubectl get services                          # List all services in the namespace
kubectl get pods --all-namespaces             # List all pods in all namespaces
kubectl get pods -o wide                      # List all pods in the current namespace, with more details
kubectl get deployment my-dep                 # List a particular deployment
kubectl get pods                              # List all pods in the namespace
kubectl get pod my-pod -o yaml                # Get a pod's YAML

# Describe commands with verbose output
kubectl describe nodes my-node
kubectl describe pods my-pod

# Get all worker nodes (use a selector to exclude results that have a label
# named 'node-role.kubernetes.io/master')
kubectl get node --selector='!node-role.kubernetes.io/master'

# Get all running pods in the namespace
kubectl get pods --field-selector=status.phase=Running

# Get ExternalIPs of all nodes
kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'

# Logs
kubectl logs my-pod                                 # dump pod logs (stdout)
kubectl logs -l name=myLabel                        # dump pod logs, with label name=myLabel (stdout)
kubectl logs my-pod --previous                      # dump pod logs (stdout) for a previous instantiation of a container
kubectl logs my-pod -c my-container                 # dump pod container logs (stdout, multi-container case)
kubectl logs -l name=myLabel -c my-container        # dump pod logs, with label name=myLabel (stdout)
kubectl logs my-pod -c my-container --previous      # dump pod container logs (stdout, multi-container case) for a previous instantiation of a container
kubectl logs -f my-pod                              # stream pod logs (stdout)
kubectl logs -f my-pod -c my-container              # stream pod container logs (stdout, multi-container case)
kubectl logs -f -l name=myLabel --all-containers    # stream all pods logs with label name=myLabel (stdout)


#links
https://learn2torials.com/a/laravel8-production-docker-image


